name: TradingView Screenshot Multi-Timeframe

on:
  workflow_dispatch:
    inputs:
      symbol:
        description: 'Trading symbol with exchange (e.g., BINANCE:BTCUSDT)'
        required: true
        default: 'BINANCE:BTCUSDT'
      timeframes:
        description: 'Comma-separated timeframes (e.g., 240,15,1D)'
        required: false
        default: '240,15,1D'

jobs:
  screenshot:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install puppeteer

      - name: Generate screenshots for all timeframes
        run: |
          node << 'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');

          (async () => {
            const symbolInput = process.env.SYMBOL || 'BINANCE:BTCUSDT';
            const timeframesStr = process.env.TIMEFRAMES || '240,15,1D';
            
            const symbolCore = symbolInput.includes(':') 
              ? symbolInput.split(':')[1] 
              : symbolInput;
            
            const timeframes = timeframesStr.split(',').map(tf => tf.trim());
            
            const tfMap = {
              '15': '15', '240': '240', '1D': 'D',
              '4h': '240', '15m': '15', '1d': 'D', 'D': 'D'
            };
            
            console.log(`Processing ${symbolInput} for timeframes: ${timeframes.join(', ')}`);
            
            const browser = await puppeteer.launch({
              headless: 'new',
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu',
                '--window-size=1920,1080'
              ]
            });
            
            const screenshots = [];
            
            for (const tf of timeframes) {
              try {
                const tvInterval = tfMap[tf] || tf;
                const url = `https://www.tradingview.com/chart/?symbol=${symbolInput}&interval=${tvInterval}`;
                
                console.log(`Opening TradingView: ${url}`);
                
                const page = await browser.newPage();
                await page.setViewport({ width: 1920, height: 1080 });
                
                await page.goto(url, { 
                  waitUntil: 'networkidle2', 
                  timeout: 60000 
                });
                
                console.log(`Waiting for ${tf} chart to load...`);
                await page.waitForTimeout(12000);
                
                try {
                  await page.evaluate(() => {
                    const selectors = [
                      '[data-name="close"]', '.close', '[aria-label="Close"]',
                      'button[aria-label="Close"]', '.tv-dialog__close',
                      '[data-role="button"][aria-label="Close"]'
                    ];
                    selectors.forEach(selector => {
                      const elements = document.querySelectorAll(selector);
                      elements.forEach(el => {
                        try { el.click(); } catch(e) {}
                      });
                    });
                  });
                  await page.waitForTimeout(2000);
                } catch (e) {
                  console.log('No popups to close');
                }
                
                const filename = `${symbolCore}_${tf}.png`;
                await page.screenshot({
                  path: filename,
                  fullPage: false
                });
                
                console.log(`Screenshot saved: ${filename}`);
                screenshots.push({ filename, timeframe: tf });
                
                await page.close();
                
              } catch (error) {
                console.error(`Error processing timeframe ${tf}:`, error.message);
              }
            }
            
            await browser.close();
            
            fs.writeFileSync('screenshots.json', JSON.stringify({
              symbol: symbolInput,
              symbolCore: symbolCore,
              screenshots: screenshots,
              timestamp: new Date().toISOString()
            }));
            
            console.log(`Generated ${screenshots.length} screenshots`);
            
          })();
          EOF
        env:
          SYMBOL: ${{ github.event.inputs.symbol }}
          TIMEFRAMES: ${{ github.event.inputs.timeframes }}

      - name: Upload screenshots as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: |
            *.png
            screenshots.json
          retention-days: 1

      - name: Summary
        run: |
          echo "âœ… Screenshots generated and uploaded as artifacts"
          cat screenshots.json
