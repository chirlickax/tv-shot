node << 'EOF'
const puppeteer = require('puppeteer');
const fs = require('fs');

async function closePopups(page) {
  // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ø–∞–ø–æ–≤
  const clickIfExists = async (sel) => {
    const el = await page.$(sel);
    if (el) { try { await el.click({ delay: 50 }); } catch {} }
  };

  // –ö—É–∫–∏/consent
  await clickIfExists('button[aria-label*="Accept"]');
  await clickIfExists('button:has-text("Accept")');
  await clickIfExists('button:has-text("I agree")');
  await clickIfExists('button:has-text("Got it")');
  await clickIfExists('[data-name="close"]');
  await clickIfExists('.tv-dialog__close');
  await clickIfExists('button[aria-label="Close"]');

  // –î–∞–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —á—É—Ç—å –≤—Ä–µ–º–µ–Ω–∏ ¬´—Å–≤–µ—Ä–Ω—É—Ç—å—Å—è¬ª
  await page.waitForTimeout(800);
}

async function waitForChartCanvas(page, timeout = 25000) {
  // –°–∞–º—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä ‚Äî –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–≤–∞—Å–∞(–æ–≤) –ø–∞–Ω–µ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∞
  // –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –µ—Å—Ç—å –Ω–∞ /chart
  const selectors = [
    'div[data-name="pane"] canvas',
    'div[data-name="chart-container"] canvas',
    'table.chart-markup-table canvas',       // —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  ];

  const start = Date.now();
  while (Date.now() - start < timeout) {
    for (const sel of selectors) {
      const count = await page.$$eval(sel, els => els.length).catch(() => 0);
      if (count > 0) return sel;
    }
    await page.waitForTimeout(300);
  }
  throw new Error('Chart canvas not found within timeout');
}

(async () => {
  const symbolInput = process.env.SYMBOL || 'BINANCE:BTCUSDT';
  const timeframesStr = process.env.TIMEFRAMES || '240,15,1D';

  const symbolCore = symbolInput.includes(':')
    ? symbolInput.split(':')[1]
    : symbolInput;

  const timeframes = timeframesStr.split(',').map(tf => tf.trim());
  const tfMap = { '15': '15', '240': '240', '1D': 'D', '4h': '240', '15m': '15', '1d': 'D', 'D': 'D' };

  console.log(`Processing ${symbolInput} for timeframes: ${timeframes.join(', ')}`);

  const browser = await puppeteer.launch({
    headless: 'new',
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-gpu',
      '--window-size=1920,1080',
      '--lang=en-US', // —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –±—ã–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏
    ],
    defaultViewport: { width: 1920, height: 1080 },
  });

  const screenshots = [];
  const errors = [];

  for (const tf of timeframes) {
    const tvInterval = tfMap[tf] || tf;
    const url = `https://www.tradingview.com/chart/?symbol=${encodeURIComponent(symbolInput)}&interval=${encodeURIComponent(tvInterval)}`;

    console.log(`\n=== ${tf} ‚Üí ${url}`);
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');

    let ok = false;

    try {
      await page.goto(url, { waitUntil: 'networkidle2', timeout: 60000 });
      // –ü–µ—Ä–≤–∞—è —á–∏—Å—Ç–∫–∞ –ø–æ–ø–∞–ø–æ–≤
      await closePopups(page);

      // –ñ–¥—ë–º –ø—Ä–æ–≥—Ä—É–∑–∫—É –∫–∞–Ω–≤–∞—Å–∞
      const usedSelector = await waitForChartCanvas(page, 25000);
      console.log(`Canvas selector present: ${usedSelector}`);

      // –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞, –¥–∞—ë–º –¥–æ—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è
      await page.waitForTimeout(1800);

      const filename = `${symbolCore}_${tf}.png`;
      await page.screenshot({ path: filename, fullPage: false });
      console.log(`‚úÖ Saved: ${filename}`);
      screenshots.push({ filename, timeframe: tf });
      ok = true;

    } catch (e) {
      console.error(`‚ùå Error on ${tf}: ${e.message}`);
      errors.push({ tf, error: e.message });
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ñ—É–ª–ª—Å–∫—Ä–∏–Ω
      try {
        const dbg = `${symbolCore}_${tf}_DEBUG.png`;
        await page.screenshot({ path: dbg, fullPage: true });
        console.log(`ü©∫ Debug saved: ${dbg}`);
        screenshots.push({ filename: dbg, timeframe: `${tf}_DEBUG` });
      } catch {}
    } finally {
      await page.close().catch(() => {});
    }

    if (!ok) console.log(`-- ${tf}: failed`);
  }

  await browser.close();

  // –ü–∏—à–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  fs.writeFileSync('screenshots.json', JSON.stringify({
    symbol: symbolInput,
    symbolCore,
    screenshots,
    errors,
    timestamp: new Date().toISOString(),
  }, null, 2));

  console.log(`\nGenerated: ${screenshots.filter(s => !s.filename.endsWith('_DEBUG.png')).length} OK, ${errors.length} failed.`);

  // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∞ ‚Äî –ø–∞–¥–∞–µ–º job-–æ–π
  if (!screenshots.some(s => !s.filename.endsWith('_DEBUG.png') && s.filename.endsWith('.png'))) {
    console.error('No successful screenshots captured.');
    process.exit(2);
  }
})();
EOF
